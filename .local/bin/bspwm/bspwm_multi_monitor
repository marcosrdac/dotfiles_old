#!/usr/bin/env sh


ordered_monitors_file=$HOME/.config/unique/ordered_monitors
temp=/tmp/polybar_bar_

# processing arguments
prompt=false
while [ "$1" != "" ]
do
  case $1 in
    --prompt|-p) prompt=true ;;
    --save|-s) save=yes ;;
    #--left) shift && left=$1 ;;
    *) echo "Arguments make no sense for me." && exit 1 ;;
  esac
  shift
done


list_remove ()
{
  removing_item="$1"
  shift
  for item in "$@"
  do
    shift
    [ "$item" = "$removing_item" ] && continue
    set -- "$@" "$item"
  done
  echo $@
}

trap "$0 --prompt --save && exit 0" ALRM

# grepping  connected monitors
monitors=$(xrandr -q | grep -w connected | awk '{ print $1 }')
#monitors="eDP1 HDMI-1 LSDV-4-4"  # debugging
# getting number of monitors
n=$(echo $monitors | wc -w)

# obtain monitors structure
if [ ! -f $ordered_monitors_file ] || $prompt
then
  ordered_monitors_file_dir=$(dirname $ordered_monitors_file)
  if [ ! -d "$ordered_monitors_file_dir" ]
  then
    mkdir -p "$ordered_monitors_file_dir"
  fi

  set $monitors
  c=1
  while [ $c -le  $n ]
  do
    case $c in
      $n) chosen_monitor=$1 ;;
      *)  chosen_monitor=$(dm_choose \
            "Which is the monitor number $c?" $@) ;;
    esac
    preedited_chosen_monitor="$(echo "$chosen_monitor" | grep -o '[^0-9^\-]*')"
    ordered_monitors="$ordered_monitors $preedited_chosen_monitor"
    new_monitors=$(list_remove $chosen_monitor $@)
    [ $c -ne $n ] && set $new_monitors
    let c=c+1
  done
  [ -z $save ] && save=$(dm_choose "Would you want to save this configuration?" no yes)
  [ $save = yes ] && echo -e "$ordered_monitors" > "$ordered_monitors_file"
else
  ordered_monitors="$(<$ordered_monitors_file)"
  echo $ordered_monitors | egrep -o "\S+" >/dev/null || kill -ALRM $$
fi

n_ordered=$(echo $ordered_monitors | wc -w)


# setting pulse up
echo $monitors | grep "HDMI" >/dev/null
if [ $? -eq 0 ]
then
  pulse_profile=output:hdmi-surround+input:analog-stereo
else
  pulse_profile=output:analog-stereo+input:analog-stereo
fi
pactl set-card-profile 0 $pulse_profile


# killing previous polybar instances
killall -q polybar


set $ordered_monitors
case $n in
  1)
    monitor=$monitors
    # getting monitor to work
    xrandr --output $monitor --auto --rotate normal --primary
    # configuring bspwm
    bspc monitor $monitor -d 1 2 3 4 5 6 7 8 9 0
    MONITOR=$monitor polybar 1 &
    #echo $! > $temp$monitor.pid
    ;;

  2)
    left=$(echo  $monitors | tr ' ' '\n' | grep -o "$1\S*") || kill -ALRM $$
    right=$(echo $monitors | tr ' ' '\n' | grep -o "$2\S*") || kill -ALRM $$

    # getting monitors to work
    xrandr --output $left  --auto --rotate normal --primary
    xrandr --output $right --auto --rotate normal --right-of $left
    # instead of --auto, you could use --mode 1366x768

    # configuring bspwm
    bspc monitor $left  -d  1 2 3 4 5
    bspc monitor $right -d  6 7 8 9 0

    MONITOR=$left polybar 21 &
    MONITOR=$right polybar 22 &
    ;;

  3)
    left=$(echo   $monitors | tr ' ' '\n' | grep -o "$1\S*") || kill -ALRM $$
    middle=$(echo $monitors | tr ' ' '\n' | grep -o "$2\S*") || kill -ALRM $$
    right=$(echo  $monitors | tr ' ' '\n' | grep -o "$3\S*") || kill -ALRM $$

    # getting monitors to work
    xrandr --output $left   --auto --rotate normal --primary
    xrandr --output $middle --auto --rotate normal --right-of $left
    xrandr --output $right  --auto --rotate normal --right-of $middle
    # instead of --auto, you could use --mode 1366x768

    # configuring bspwm
    bspc monitor $left   -d  1 2 3 4
    bspc monitor $middle -d  5 6 7
    bspc monitor $right  -d  8 9 0

    MONITOR=$left   polybar 31 &
    MONITOR=$middle polybar 32 &
    MONITOR=$right  polybar 33 &
    ;;
esac

~/.fehbg
