#!/usr/bin/env sh

# TO DO: substitute

TRASH_DIR=${TRASH:-"$XDG_DATA_HOME/Trash"}
TRASH_FILES=${TRASH_DIR:-"$XDG_DATA_HOME/Trash"}/files
TRASH_INFO=${TRASH:-"$XDG_DATA_HOME/Trash"}/info
[ -e $TRASH_FILES ] || mkdir -p $TRASH_FILES
[ -e $TRASH_INFO ] || mkdir -p $TRASH_INFO
INFOEXT=".tsv"
IFS=$'\n'
HERE=$(pwd)


trash_put () {
  [ $# -lt 1 ] && echo "No path given as argument." && exit 1
  for src in $@
  do
    [ ! -e "$src" ] && echo "\"$src\" does not exist." && exit 1
    [ ${src:0:1} == '/' ] && fullsrc=$src || fullsrc=$HERE/$src
    basesrc=$(basename "$src")
    # get last trash id to calculate the new one's
    lastid="$(ls $TRASH_INFO | egrep -o '^[0-9]+' | sort -g | tail -n 1)"
    [ -z "$lastid" ] && id=0 || id=$((lastid+1))
    trash="$TRASH_FILES/${id}_${basesrc}"
    infofile="$TRASH_INFO/${id}_${basesrc}$INFOEXT"
    info="SOURCE_PATH\t$fullsrc\nTRASH_PATH\t$trash"
    please='' && [ ! -w "$src" ] && please='sudo'
    $please mv "$src" "$trash" && echo -e "$info" > "$infofile"

    if [ $? -eq 0 ]
    then
      echo -e "\"$basesrc\" moved to trash with ID: \"$id\"."
    else
      echo -e "Could not trash \"$basesrc\"."
      exit 1
    fi
  done
}

trash_empty () {
  infofiles=$(ls $TRASH_INFO | grep "$INFOEXT\$" | sort -gr)
  for infofile in $infofiles
  do
    infofile=$TRASH_INFO/$infofile
    trash="$(cat $infofile | awk -F '\t' '/^TRASH_PATH/ { print $2 }')"
    please='' && [ ! -w "$trash" ] && please='sudo'
    $please rm -rf "$trash" && rm -f "$infofile" ||
      echo "Could not remove \"$filename\"." exit 1
  done
  for path in $(ls -d "$TRASH_FILES"/* && ls -d "$TRASH_INFO"/*)
  do
    notify-send
    please='' && [ ! -w "$path" ] && please='sudo'
    $please rm -rf "$path"
  done
  echo "Trash empty."
}

trash_list () {
  infofiles=$(ls $TRASH_INFO | grep "$INFOEXT\$" | sort -g)
  [ $(echo -e "$infofiles" | wc -w) -gt 0 ] && echo -e "ID\tSOURCE_PATH"
  for infofile in $infofiles
  do
    infofile=$TRASH_INFO/$infofile
    info="$(basename $infofile)"
    id=${info%%_*}
    src=$(cat $infofile | awk -F '\t' '/^SOURCE_PATH/ { print $2 }')
    echo -e "${id}\t${src}"
  done
}

trash_restore () {
  [ -z "$1" ] && echo "No trash ID's given as argument." && exit 1 || id="$1"
  infofiles=$(ls "$TRASH_INFO" | grep "$INFOEXT\$")
  found=false
  for infofile in $infofiles
  do
    infofile="$TRASH_INFO/$infofile"
    info="$(basename $infofile)"
    [ $id -eq ${info%%_*} ] && found=true && break
  done

  ! $found && echo "Could no find such entry number $id." && exit 1
  src="$(cat $infofile | awk -F '\t' '/^SOURCE_PATH/ { print $2 }')"
  trash="$(cat $infofile | awk -F '\t' '/^TRASH_PATH/ { print $2 }')"

  srcdir="$(dirname "$src")"
  if [ ! -e "$srcdir" ]
  then
    echo "Directory does not exist. Restoring file to \"$HOME\"."
    src="$HOME/$(basename $src)"
  fi

  while [ -e "$src" ]
  do
    src="$src.bak"
  done

  
  please='' && ([ ! -w "$trash" ] || [ ! -w "$srcdir" ]) && please='sudo'
  $please mv -b "$trash" "$src" && rm "$infofile"

  if [ $? -eq 0 ]
  then
    echo "\"$src\" restored."
  else
    echo "Could not restore \"$src\" from \"$trash\"." && exit 1
  fi
}

trash_restore_last () {
  lastid=$(trash_list | tail -n 1 | awk '{print $1}')
  trash_restore $lastid
}


case $1 in
  --restore|-r)  # create untrash command
    if [ "$2" = "last" ]
    then
      n="$3" && trash_restore_last "$n"
    else
      id="$2" && trash_restore "$id"
    fi ;;
  --list|-l) trash_list ;;
  --empty|-e) trash_empty ;;
  --put|-p) shift && trash_put $@ ;;
  *) [ ! -z "$1" ] && trash_put $@ || echo "No arguments given." ;;
esac
