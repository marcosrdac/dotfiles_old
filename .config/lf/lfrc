# interpreter for shell commands (needs to be POSIX compatible)
set shell sh
# shell behaviour
set shellopts '-e'
# internal filed separator
set ifs "\n"
# find stops when there is only one file left
set findlen 0
# borders around
set drawbox=false
# show hiden files
set hidden=false
# scrll before selecting end of list
set scrolloff 8
# show icons
set icons
# ignore case
set ignorecase true
# custom previewer script to be used
#set previewer ""


map f
map r

map f find

# use enter for shell commands
map <enter> open
# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

map <delete> trash
# Unmap the default mapping so the rest of the following mapping won't collide
# Simple rename:
map a
map a $lf -remote "send $id push :rename<space>--no-ext<space>$f"
# Rename with the filename on the command line
map ra $lf -remote "send $id push :rename<space>$f"
# Rename with the filename without the extension
map re $lf -remote "send $id push :rename<space>$f<a-b><a-d>"

cmd open ${{
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}


cmd recol %{{
    w=$(tput cols)
    if [ $w -le 80 ]; then
        lf -remote "send $id set ratios 1:2"
    elif [ $w -le 160 ]; then
        lf -remote "send $id set ratios 1:2:3"
    else
        lf -remote "send $id set ratios 1:2:3:5"
    fi
}}
recol

cmd trash % trash-put $fx
cmd trash-restore $ trash-restore

cmd mkdir %{{
  base="$(dirname "$f")"

  if [ $# -lt 1 ]
  then
    printf "Folder name: "
    read ans
    set $ans
  fi

  for folder_name in "$@"
  do
    mkdir -p $base/$folder_name
  done

  [ $# -ne 1 ] && ies=ies || ies=y
  echo "Director$ies created: $@"
}}

cmd touch %{{
  base="$(dirname "$f")"

  if [ $# -lt 1 ]
  then
    printf "Folder name: "
    read ans
    set $ans
  fi

  for file_name in "$@"
  do
    touch $base/$file_name
  done

  [ $# -ne 1 ] && ies=ies || ies=y
  echo "Director$ies created: $@"
}}

cmd q %{{
  lf -remote "send $id quit"
}}

#cmd rename %{{
#  base="$(dirname "$f")"
#  full_fn=$(basename -- "$f")
#  fn="${fn%.*}"
#  ext="${fn##*.}"
#
#  if [ $# -le 1 ]
#  then
#    if [ $# -eq 0 ]
#    then
#      #printf "Rename $(basename $f) to: "
#      #read ans
#      read ans -p "Rename "$full_fn" to: "
#      set $ans
#    fi
#    mv -i $f $base/$1
#    exit 0
#  fi
#
#  echo oioi
#
#  case $1 in
#    --wo-ext)  # careful if $2 left blank
#      echo $fn $ext ;;
#    *)
#      ;;
#    esac
#}}


  #if [ $# -lt 1 ]
  #then
  #  printf "Folder name: "
  #  read ans
  #  set $ans
  #fi

  #for folder_name in "$@"
  #do
  #  mkdir $base/$folder_name
  #done

  #[ $# -ne 1 ] && ies=ies || ies=y
  #echo "Director$ies created: $@"
}}


# extract the current file with the right command
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd bulk-rename ${{
    old=$(mktemp)
    new=$(mktemp)
    [ -n $fs ] && fs=$(ls)
    printf "$fs\n" > $old
    printf "$fs\n" > $new
    $EDITOR $new
    [ $(cat $new | wc -l) -ne $(cat $old | wc -l) ] && exit
    paste $old $new | while read names; do
        src=$(printf $names | cut -f1)
        dst=$(printf $names | cut -f2)
        [ $src = $dst ] && continue
        [ -e $dst ] && continue
        mv -i $src $dst
    done
    rm $old $new
    lf -remote "send $id unselect"
}}

## pasting done right
#cmd paste ${{
#    send="while read -r line; do lf -remote \"send $id echo \$line\"; done && lf -remote 'send reload'"
#    load=$(lf -remote 'load')
#    mode=$(echo "$load" | sed -n '1p')
#    srcF=$(mktemp)
#    echo "$load" | sed '1d' > "$srcF"
#    s='' && [ ! -w . ] && s='sudo'
#    case "$mode" in
#        copy) cmd='cp-p';; move) cmd='mv-p';;
#    esac
#    cmd="$cmd --new-line"
#    $s sh -c "$cmd --backup=numbered -F \"$srcF\" . | $send && rm -f \"$srcF\" &"
#    lf -remote 'send load'
#    lf -remote 'send clear'
#}}
